//g++ -O2 miracl_benchmark_prime.cc ../home/vagrant/miracl/zzn.o ../home/vagrant/miracl/big.o ../home/vagrant/miracl/miracl.a -I../home/vagrant/miracl -std=c++11 -isystem ../home/vagrant/benchmark/include/ -lbenchmark -lpthread -L../home/vagrant/benchmark/build/src -o mybench

extern "C"
{
    #include "miracl.h"
}
#include "zzn.h"
#include <benchmark/benchmark.h>

Miracl precision=100;
miracl *mip=&precision;

Big init(Big modulus)
{
  modulo(modulus);

  return modulus;
}

//PRIME FIELD TESTS
static void BM_PrimeField_Addition(benchmark::State& state, ZZn firstNumber, ZZn secondNumber, Big mod)
{
    for (auto _ : state) {
        firstNumber + secondNumber;
    }
}

static void BM_PrimeField_Multiplication(benchmark::State& state, ZZn firstNumber, ZZn secondNumber, Big mod)
{
    for (auto _ : state) {
        firstNumber * secondNumber;
    }
}

static void BM_PrimeField_Exponentiation(benchmark::State& state, Big power, ZZn base, Big mod)
{
    for (auto _ : state) {
        pow(base, power);
    }
}

static void BM_PrimeField_MultiplicativeInversion(benchmark::State& state, Big base, Big mod)
{
    for (auto _ : state) {
        inverse(base, mod);
    }
}

BENCHMARK_CAPTURE(BM_PrimeField_Addition, basic_addition, ZZn(Big("654634343526546343435235252356546343435235252351242543642626346265473554345345345346345235235352356234364262623654634343523525235436426262335252354364262623")), ZZn(Big("65463434352654634343431212312552346326546343426546343434312123343121232342346426262365463434352352526546343434312123235436426262335252354364262623")), init(Big("127064667816153171453188458361121716837742586505814733181241470456786145066345547978484036504112599410542843490798748221028371638017831629596721969094482336338121230226570799909681840514956441130146955529333898991319999073734340328211327012424337328469145574215738612082413345484375774166766470122537302830033")));

BENCHMARK_CAPTURE(BM_PrimeField_Multiplication, basic_multiplication, ZZn(Big("654634343526546343435235252356546343435235252351242543642626346265473554345345345346345235235352356234364262623654634343523525235436426262335252354364262623")), ZZn(Big("65463434352654634343431212312552346326546343426546343434312123343121232342346426262365463434352352526546343434312123235436426262335252354364262623")), init(Big("127064667816153171453188458361121716837742586505814733181241470456786145066345547978484036504112599410542843490798748221028371638017831629596721969094482336338121230226570799909681840514956441130146955529333898991319999073734340328211327012424337328469145574215738612082413345484375774166766470122537302830033")));

BENCHMARK_CAPTURE(BM_PrimeField_Exponentiation, modular_exponentiation_with_not_reduced_exponent, Big("964208249802749964208249802749029642082498027490265927832937489237821721648750706842187461824690260746806592783293796420824980274902659278329374892378217216487507068421874618246902607468048996420824980274902659278329374892378217216487507068421874618246902607468023782172196420824980274902659278329374892378217216487507068421874618246902607468064879642082498027490265927832937489237821721648750706842187461824690260746805070684218746182496420824980274902659278329374892378217216487507068421874618246902607468069026074680026592783293748923782172964208249802749026592783293748923782172164875070684218746182469026074680164875070684218746182469642082498027490265927832937489237821721648750706842187461824690260746809026074680"), ZZn(Big("65463434352654634343431212312552346326546343426546343434312123343121232342346426262365463434352352526546343434312123235436426262335252354364262623")), init(Big("127064667816153171453188458361121716837742586505814733181241470456786145066345547978484036504112599410542843490798748221028371638017831629596721969094482336338121230226570799909681840514956441130146955529333898991319999073734340328211327012424337328469145574215738612082413345484375774166766470122537302830033")));

BENCHMARK_CAPTURE(BM_PrimeField_Exponentiation, modular_exponentiation_with_reduced_exponent, Big("29920919596070184232543104448733767801216164681815517738158399461869100719095892740285237041906414361045004203494212747763034362349849701968950328158893069677127144346126543948759469151772810256933700029271078416426709808675804407619702712540005353228326944885936488468999763784817403917659567907409539253480"), ZZn(Big("65463434352654634343431212312552346326546343426546343434312123343121232342346426262365463434352352526546343434312123235436426262335252354364262623")), init(Big("127064667816153171453188458361121716837742586505814733181241470456786145066345547978484036504112599410542843490798748221028371638017831629596721969094482336338121230226570799909681840514956441130146955529333898991319999073734340328211327012424337328469145574215738612082413345484375774166766470122537302830033")));

BENCHMARK_CAPTURE(BM_PrimeField_MultiplicativeInversion, basic_inverse, Big("654634343526546343435235252356546343435235252351242543642626346265473554345345345346345235235352356234364262623654634343523525235436426262335252354364262623"), init(Big("127064667816153171453188458361121716837742586505814733181241470456786145066345547978484036504112599410542843490798748221028371638017831629596721969094482336338121230226570799909681840514956441130146955529333898991319999073734340328211327012424337328469145574215738612082413345484375774166766470122537302830033")));

BENCHMARK_MAIN();